exit
@round = @competition_event.rounds.build(round_params)
@round
exit
@round
@rounds
exit
@round = @competition_event.rounds.build(round_params)
@competition_event.id
@round
exit
@round.competition_event_id 
@round.competition_event_id = @competition_event.id
@round.competition_event_id = @compeition_event.id
@round
@competition_event.id
@competition_event
@round
@rounds
exit
Round.all
Round.where(round_number: 1, competition_event_id: params[:competition_event_id])
params[:competition_event_id]
c
@round
@rounds
c
exit
c
@round
c
@competition_event.id
@round
exit
@competition_event.rounds
@competition_event
@competition
exit
e
@round.save
@round.event_id = 1
@round.round_number = 1
@round.id = 1
@round = Round.new
exit
@competition_event.rounds
@competition_event
@round
c
@round
c
@event.rounds
c
@round
c
Round.all
Round.find(1)
@event.competition_id
@event = Event.find(params[:id])
Event.find(params[:id])
@competition.events.find(params[:id])
c
@round
params[:event_id]
event_id
c
exit
@round.event_id
@round
exit
@round
@round = Round.find(1)
@event = Event.find(1)
@event.rounds
@event
exit
@event.rounds
@event
c
@event
exit
@event.id
@event
c
exit
c
@event.rounds
@event
exit
@event.rounds
@event.rounds.where(round_number: 1)
@round
Round.all
c
Round.all
Rounds
@round
c
cc
c
@event.rounds
@event
Round.find(1)
@event.rounds.where(round_number: 1)
continue
exit
@event.rounds.find(1)
@event.round.find(1)
@round.round_number
@competition.events
@event.rounds
@event
@round
@competition.events.where(id: 1)
@competition.events
@competition
@event.rounds
@event
@event.rounds.where(round_number: 1)
exit
@round.inspect
@round.event_id
@round
@round.id
@round = @event.rounds.where(round_number: 1)
@event.rounds.where(round_number: 1)
@event.rounds.where(round_number: 1).id
@event.rounds
@event
c
exit
e
@event.rounds
@event
@round
@round = @event.rounds.where(round_number: 1)
@round = @event.rounds.where(round_number: 1).id
@event.rounds.where(round_number: 1)
@event.rounds.where(round_number: 1).id
c
exit
@round
exit
@round = @event.rounds.new
exit
e
@round = @event.rounds.new
exit
@round = @event.rounds.new
@event
c
exit
c
continue
@event
exit
continue
exit
e
@event.rounds.new
@event.rounds
@event
c
a
time
to,e
time[time.length-c] = a[a.length-c]
time[time.length-c]
c = c+1
time[time.length-c]
c = c+1
time[time.length-c] = a[a.length-c]
time[time.length-c]
c = c+1
time
time[time.length-c] = a[a.length-c]
time[time.length-c]
c = c+1
time[time.length-c]
c = c+1
time[time.length-c]
time
time[time.length-c] = a[a.length-c]
c = c+1
time[time.length-c] = a[a.length-c]
c= 1
c = c+1
    end  
        time[time.length-c] = a[a.length-c]
    if time[time.length-c] == 0 do
while c < a.length do
c = 1
a.count
c = c
$c
end$c
c = c+1
    end  
        time[time.length-c] = a[a.length-c]
    if time[time.length-c] == 0 do
while c < a.count do
c = 1
a = "123456"
time = "00:00.00"
c
    end  
        time[time.length-c] = a[a.length-c]
if time[time.length-c] == 0 do
time
c++
    end  
        time[time.length-c] = a[a.length-c]
    end  if time[time.length-c] == 0 do
        time[time.length-c] = a[a.length-c]
if time[time.length-c] == 0 do
c = 2
time
time[time.length-c] = a[a.length-c]
a[a.length-c]
time[time.length - c]
c = 1
time[time.length - c]
time[time.length-c]
c = 0
time
a
enda
    end  
        time[time.length-c] = a[a.length-c]
    if time[time.length-c] == 0 do
while c < a.count do
c = 0
end
    end  
        time[time.length-c] = a[a.length-c]
    if time[time.length-c] == 0 do
while c < a.count do
endc = 0
    end  
        time[time.length-i] = a[a.length-i]
    if time[time.length-i] == 0 do
while i < a.count do
i = 0
a = "123456"
a.count
a = 123456
a = "123456"
a
a.length
time.each
time = "00:00.00"
time
time[time.length-3] = a[a.length-3]
time[time.length-2] = a[a.length-2]
time
time[time.length-1] = a[a.length-1]
