exit
@round
exit
@round = @event.rounds.new
exit
e
@round = @event.rounds.new
exit
@round = @event.rounds.new
@event
c
exit
c
continue
@event
exit
continue
exit
e
@event.rounds.new
@event.rounds
@event
c
a
time
to,e
time[time.length-c] = a[a.length-c]
time[time.length-c]
c = c+1
time[time.length-c]
c = c+1
time[time.length-c] = a[a.length-c]
time[time.length-c]
c = c+1
time
time[time.length-c] = a[a.length-c]
time[time.length-c]
c = c+1
time[time.length-c]
c = c+1
time[time.length-c]
time
time[time.length-c] = a[a.length-c]
c = c+1
time[time.length-c] = a[a.length-c]
c= 1
c = c+1
    end  
        time[time.length-c] = a[a.length-c]
    if time[time.length-c] == 0 do
while c < a.length do
c = 1
a.count
c = c
$c
end$c
c = c+1
    end  
        time[time.length-c] = a[a.length-c]
    if time[time.length-c] == 0 do
while c < a.count do
c = 1
a = "123456"
time = "00:00.00"
c
    end  
        time[time.length-c] = a[a.length-c]
if time[time.length-c] == 0 do
time
c++
    end  
        time[time.length-c] = a[a.length-c]
    end  if time[time.length-c] == 0 do
        time[time.length-c] = a[a.length-c]
if time[time.length-c] == 0 do
c = 2
time
time[time.length-c] = a[a.length-c]
a[a.length-c]
time[time.length - c]
c = 1
time[time.length - c]
time[time.length-c]
c = 0
time
a
enda
    end  
        time[time.length-c] = a[a.length-c]
    if time[time.length-c] == 0 do
while c < a.count do
c = 0
end
    end  
        time[time.length-c] = a[a.length-c]
    if time[time.length-c] == 0 do
while c < a.count do
endc = 0
    end  
        time[time.length-i] = a[a.length-i]
    if time[time.length-i] == 0 do
while i < a.count do
i = 0
a = "123456"
a.count
a = 123456
a = "123456"
a
a.length
time.each
time = "00:00.00"
time
time[time.length-3] = a[a.length-3]
time[time.length-2] = a[a.length-2]
time
time[time.length-1] = a[a.length-1]
a = "12345"
time[time.length-1] = a[a.length-1]
time = "000000"
a = 12345
a
a[a.length-1]
a[a.length]
a[1-1]
a[0]
a.5
a.count "123456789"
a.count 123456789"
a = "1:23.45"
exit
timeDigits = time.count
time = "1:4.73"
x = Time.parse("2011-05-21 04:20:46.011", "%Y-%m-%d %H:%M:%S.%3N")
Time.parse("2011-05-21 04:20:46.011", "%Y-%m-%d %H:%M:%S.%3N")
Time.parse("2011-05-21 04:20:46.01", "%Y-%m-%d %H:%M:%S.%2N")
Time.parse("2:45.61", "%m:%s.%3N")
time = Time.new()
Time.parse("2:45.61", "%M:%S.%3N")
Time.parse("2:45.61", "%M:%S.%2N")
time
time = Time.new(0)
time = Time.new
Time.at(time).utc.strftime("%s")
time
Time.at(time).utc.strftime("%Q")
Time.at(time).utc.strftime("%M:%S")
time = Time.new(0)
time = Time.new(0,0)
time = Time.new(0,0,0)
time = Time.new(0,0,0,0)
time = Time.new(0,0,0,0,0)
time = Time.new(0,0,0,0,0,0)
time = Time.new(0)
time = 0
time = Time.new
time.strftime("%M:%S")
time = Time.new
time.strftime("%M:%S")
Time.parse('1:.45')
continue
@allEventSolves[0][0]continue
@allEventSolves[0][0][0]
@allEventSolves[0][0]
@allEventSolves[0]
@allEventSolves
continue
e
continu
continue
@solves
end
solves[0][i-1].solve_time
for i in 1..@allEventSolves.count
          <% end
            <%= solves[0][i-1].solve_time %>
for i in 1..@allEventSolves.count %></td>
continue
@allEventSolves[0][0].solve_time
@allEventSolves[0].solve_time
@allEventSolves.count
@allEventSolves[0]
@allEventSolves
continue
@allEventSolves
exit
continue
continu
continue
exit
@allEventSolves[0][0].solve_time
@allEventSolves[0][0][0]
@allEventSolves[0][0]
@allEventSolves[0]
continue
exit
@allEventSolves
continue
@allEventSolves
continue
@allEventSolves
continue
@allEventSolves
continue
@allEventSolves
continue
@allEventSolves
@solve
@solves
continue
@allEventSolves
continue
@allEventSolves
continue
@allEventSolves
@allEventSolves[0]
exit
@allEventSolves[0]
@allEventSolves[1]
exit
@allEventSolves
exit
@solves
@solve 
continue
exit
@solve = competitor.solves.where(competitor_id: 1, solve_number: 2).take
@solve = competitor.solves.where(competitor_id: 2).take
continue
contiue
exit
@solve = competitor.solves.where(competitor_id: 2).take
competitor.solves.exists?(:competitor_id => competitor, solve_number: 2)
@i
continue
@i
exit
$i
i
@solve
@solves
continue
@solves
@solve
@allEventSolves
exit
@allEventSolves
continue
@allEventSolves
@solves
exit
@solves
@solve
exit
@solve
continue
competitor.solves
